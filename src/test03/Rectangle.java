package test03;
/*직사각형을 만드는 데 필요한 4개의 점 중 3개의 좌표가 주어질 때, 나머지 한 점의 좌표를 구하려고 합니다. 
 * 점 3개의 좌표가 들어있는 배열 v가 매개변수로 주어질 때, 
 * 직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 return 하도록 solution 함수를 완성해주세요. 
 * 단, 직사각형의 각 변은 x축, y축에 평행하며, 반드시 직사각형을 만들 수 있는 경우만 입력으로 주어집니다.

제한사항
v는 세 점의 좌표가 들어있는 2차원 배열입니다.
v의 각 원소는 점의 좌표를 나타내며, 좌표는 [x축 좌표, y축 좌표] 순으로 주어집니다.
좌표값은 1 이상 10억 이하의 자연수입니다.
직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 [x축 좌표, y축 좌표] 순으로 담아 return 해주세요.
입출력 예
v	result
[[1, 4], [3, 4], [3, 10]]	[1, 10]
[[1, 1], [2, 2], [1, 2]]	[2, 1]
입출력 예 설명
입출력 예 #1
세 점이 [1, 4], [3, 4], [3, 10] 위치에 있을 때, [1, 10]에 점이 위치하면 직사각형이 됩니다.

입출력 예 #2
세 점이 [1, 1], [2, 2], [1, 2] 위치에 있을 때, [2, 1]에 점이 위치하면 직사각형이 됩니다.*/
public class Rectangle {
	
	public int[] insertCoordinate(int[][] v) {
		/**
		 * 
		 * a,b,c,d 좌표가 있다고 하면
		 * 대각선 c 좌표와는 일치하지 않고
		 * 가로좌표 a와는 y축이 일치하고
		 * 세로좌표 d와는 x축이 일치한다
		 * 
		 * 1. 어떤 것이 가로좌표, 세로좌표인지 알아낸다.
		 * 2. 하나만 일치하는 좌표 2개가 있고, 둘다 일치하는 좌표 1개가 있다.
		 * 3. 하나만 일치하는 좌표 2개의 나머지 좌표의 묶음이 result 좌표이다.
		 * 
		 * */
		int x1,x2,x3;
		int y1,y2,y3;
		
		x1 = v[0][0];
		x2 = v[1][0];
		x3 = v[2][0];
		
		y1 = v[0][1]; 
		y2 = v[1][1]; 
		y3 = v[2][1];

		int []answer = {getX(x1, x2, x3),getY(y1, y2, y3) };
		
		return answer;

	}
	
	private int getX(int x1, int x2, int x3) {
		if (x1 == x2) {
			return x3;
		} else if (x1 == x3) {
			return x2;
		} else {
			return x1;
		}

	}
	
	private int getY(int y1, int y2, int y3) {
		if (y1 == y2) {
			return y3;
		} else if (y1 == y3) {
			return y2;
		} else {
			return y1;
		}

	}

}
